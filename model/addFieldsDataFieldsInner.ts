/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from "./models";

export class AddFieldsDataFieldsInner {
  "alignment"?: AddFieldsDataFieldsInner.AlignmentEnum;
  "autoCalculateMaxLength"?: boolean;
  "backgroundColor"?: string;
  "backgroundColorFieldName"?: string;
  "backgroundColorFieldRequired"?: boolean;
  "barcodeSymbology"?: string;
  "bold"?: boolean;
  "characterSpacing"?: number;
  "checkCharacter"?: AddFieldsDataFieldsInner.CheckCharacterEnum;
  "checkColor"?: string;
  "checkColorFieldName"?: string;
  "checkColorFieldRequired"?: boolean;
  "color"?: string;
  "colorFieldName"?: string;
  "colorFieldRequired"?: boolean;
  "comb"?: boolean;
  "combNumberOfCells"?: number;
  "combValueOffset"?: number;
  "combinedFieldFormat"?: string;
  "combinedFieldNames"?: string;
  "combinedFieldSeparator"?: string;
  "combinedFieldType"?: string;
  "condition"?: string;
  "currency"?: boolean;
  "dateTimeFormat"?: string;
  "decimalPlaces"?: number;
  "_default"?: string;
  "description"?: string;
  "displayType"?: AddFieldsDataFieldsInner.DisplayTypeEnum;
  "exclusiveMaximum"?: boolean;
  "exclusiveMinimum"?: boolean;
  "falseText"?: string;
  "fontSize"?: number;
  "height"?: number;
  "hidden"?: boolean;
  "id"?: number;
  "imageGravity"?: AddFieldsDataFieldsInner.ImageGravityEnum;
  "imageScaleType"?: AddFieldsDataFieldsInner.ImageScaleTypeEnum;
  "includeTime"?: boolean;
  "integer"?: boolean;
  "invertBooleanCondition"?: boolean;
  "maxLength"?: number;
  "maximum"?: number;
  "metadata"?: string;
  "minLength"?: number;
  "minimum"?: number;
  "multiline"?: boolean;
  "multilineLines"?: number;
  "name": string;
  "numberConditionRangeExclusiveMax"?: boolean;
  "numberConditionRangeExclusiveMin"?: boolean;
  "numberConditionRangeMax"?: number;
  "numberConditionRangeMin"?: number;
  "numberConditionType"?: AddFieldsDataFieldsInner.NumberConditionTypeEnum;
  "opacity"?: number;
  "optionList"?: string;
  "overflow"?: AddFieldsDataFieldsInner.OverflowEnum;
  "page": number;
  "placeholder"?: string;
  "qrcodeColor"?: string;
  "qrcodeColorFieldName"?: string;
  "qrcodeColorFieldRequired"?: boolean;
  "required"?: boolean;
  "rotation"?: number;
  "shapeBorderColor"?: string;
  "shapeBorderColorFieldName"?: string;
  "shapeBorderColorFieldRequired"?: boolean;
  "shapeBorderWidth"?: number;
  "shapeFillColor"?: string;
  "shapeFillColorFieldName"?: string;
  "shapeFillColorFieldRequired"?: boolean;
  "shapeType"?: AddFieldsDataFieldsInner.ShapeTypeEnum;
  "signatureAllowDraw"?: boolean;
  "signatureAllowType"?: boolean;
  "_static"?: boolean;
  "strikethrough"?: boolean;
  "stringConditionType"?: AddFieldsDataFieldsInner.StringConditionTypeEnum;
  "title"?: string;
  "trueText"?: string;
  "type"?: AddFieldsDataFieldsInner.TypeEnum;
  "typeface"?: string;
  "uppercase"?: boolean;
  "vAlignment"?: AddFieldsDataFieldsInner.VAlignmentEnum;
  "width"?: number;
  "x"?: number;
  "y"?: number;

  static discriminator: string | undefined = undefined;

  static attributeTypeMap: Array<{
    name: string;
    baseName: string;
    type: string;
  }> = [
    {
      name: "alignment",
      baseName: "alignment",
      type: "AddFieldsDataFieldsInner.AlignmentEnum",
    },
    {
      name: "autoCalculateMaxLength",
      baseName: "autoCalculateMaxLength",
      type: "boolean",
    },
    {
      name: "backgroundColor",
      baseName: "backgroundColor",
      type: "string",
    },
    {
      name: "backgroundColorFieldName",
      baseName: "backgroundColorFieldName",
      type: "string",
    },
    {
      name: "backgroundColorFieldRequired",
      baseName: "backgroundColorFieldRequired",
      type: "boolean",
    },
    {
      name: "barcodeSymbology",
      baseName: "barcodeSymbology",
      type: "string",
    },
    {
      name: "bold",
      baseName: "bold",
      type: "boolean",
    },
    {
      name: "characterSpacing",
      baseName: "characterSpacing",
      type: "number",
    },
    {
      name: "checkCharacter",
      baseName: "checkCharacter",
      type: "AddFieldsDataFieldsInner.CheckCharacterEnum",
    },
    {
      name: "checkColor",
      baseName: "checkColor",
      type: "string",
    },
    {
      name: "checkColorFieldName",
      baseName: "checkColorFieldName",
      type: "string",
    },
    {
      name: "checkColorFieldRequired",
      baseName: "checkColorFieldRequired",
      type: "boolean",
    },
    {
      name: "color",
      baseName: "color",
      type: "string",
    },
    {
      name: "colorFieldName",
      baseName: "colorFieldName",
      type: "string",
    },
    {
      name: "colorFieldRequired",
      baseName: "colorFieldRequired",
      type: "boolean",
    },
    {
      name: "comb",
      baseName: "comb",
      type: "boolean",
    },
    {
      name: "combNumberOfCells",
      baseName: "combNumberOfCells",
      type: "number",
    },
    {
      name: "combValueOffset",
      baseName: "combValueOffset",
      type: "number",
    },
    {
      name: "combinedFieldFormat",
      baseName: "combinedFieldFormat",
      type: "string",
    },
    {
      name: "combinedFieldNames",
      baseName: "combinedFieldNames",
      type: "string",
    },
    {
      name: "combinedFieldSeparator",
      baseName: "combinedFieldSeparator",
      type: "string",
    },
    {
      name: "combinedFieldType",
      baseName: "combinedFieldType",
      type: "string",
    },
    {
      name: "condition",
      baseName: "condition",
      type: "string",
    },
    {
      name: "currency",
      baseName: "currency",
      type: "boolean",
    },
    {
      name: "dateTimeFormat",
      baseName: "dateTimeFormat",
      type: "string",
    },
    {
      name: "decimalPlaces",
      baseName: "decimalPlaces",
      type: "number",
    },
    {
      name: "_default",
      baseName: "default",
      type: "string",
    },
    {
      name: "description",
      baseName: "description",
      type: "string",
    },
    {
      name: "displayType",
      baseName: "displayType",
      type: "AddFieldsDataFieldsInner.DisplayTypeEnum",
    },
    {
      name: "exclusiveMaximum",
      baseName: "exclusiveMaximum",
      type: "boolean",
    },
    {
      name: "exclusiveMinimum",
      baseName: "exclusiveMinimum",
      type: "boolean",
    },
    {
      name: "falseText",
      baseName: "falseText",
      type: "string",
    },
    {
      name: "fontSize",
      baseName: "fontSize",
      type: "number",
    },
    {
      name: "height",
      baseName: "height",
      type: "number",
    },
    {
      name: "hidden",
      baseName: "hidden",
      type: "boolean",
    },
    {
      name: "id",
      baseName: "id",
      type: "number",
    },
    {
      name: "imageGravity",
      baseName: "imageGravity",
      type: "AddFieldsDataFieldsInner.ImageGravityEnum",
    },
    {
      name: "imageScaleType",
      baseName: "imageScaleType",
      type: "AddFieldsDataFieldsInner.ImageScaleTypeEnum",
    },
    {
      name: "includeTime",
      baseName: "includeTime",
      type: "boolean",
    },
    {
      name: "integer",
      baseName: "integer",
      type: "boolean",
    },
    {
      name: "invertBooleanCondition",
      baseName: "invertBooleanCondition",
      type: "boolean",
    },
    {
      name: "maxLength",
      baseName: "maxLength",
      type: "number",
    },
    {
      name: "maximum",
      baseName: "maximum",
      type: "number",
    },
    {
      name: "metadata",
      baseName: "metadata",
      type: "string",
    },
    {
      name: "minLength",
      baseName: "minLength",
      type: "number",
    },
    {
      name: "minimum",
      baseName: "minimum",
      type: "number",
    },
    {
      name: "multiline",
      baseName: "multiline",
      type: "boolean",
    },
    {
      name: "multilineLines",
      baseName: "multilineLines",
      type: "number",
    },
    {
      name: "name",
      baseName: "name",
      type: "string",
    },
    {
      name: "numberConditionRangeExclusiveMax",
      baseName: "numberConditionRangeExclusiveMax",
      type: "boolean",
    },
    {
      name: "numberConditionRangeExclusiveMin",
      baseName: "numberConditionRangeExclusiveMin",
      type: "boolean",
    },
    {
      name: "numberConditionRangeMax",
      baseName: "numberConditionRangeMax",
      type: "number",
    },
    {
      name: "numberConditionRangeMin",
      baseName: "numberConditionRangeMin",
      type: "number",
    },
    {
      name: "numberConditionType",
      baseName: "numberConditionType",
      type: "AddFieldsDataFieldsInner.NumberConditionTypeEnum",
    },
    {
      name: "opacity",
      baseName: "opacity",
      type: "number",
    },
    {
      name: "optionList",
      baseName: "optionList",
      type: "string",
    },
    {
      name: "overflow",
      baseName: "overflow",
      type: "AddFieldsDataFieldsInner.OverflowEnum",
    },
    {
      name: "page",
      baseName: "page",
      type: "number",
    },
    {
      name: "placeholder",
      baseName: "placeholder",
      type: "string",
    },
    {
      name: "qrcodeColor",
      baseName: "qrcodeColor",
      type: "string",
    },
    {
      name: "qrcodeColorFieldName",
      baseName: "qrcodeColorFieldName",
      type: "string",
    },
    {
      name: "qrcodeColorFieldRequired",
      baseName: "qrcodeColorFieldRequired",
      type: "boolean",
    },
    {
      name: "required",
      baseName: "required",
      type: "boolean",
    },
    {
      name: "rotation",
      baseName: "rotation",
      type: "number",
    },
    {
      name: "shapeBorderColor",
      baseName: "shapeBorderColor",
      type: "string",
    },
    {
      name: "shapeBorderColorFieldName",
      baseName: "shapeBorderColorFieldName",
      type: "string",
    },
    {
      name: "shapeBorderColorFieldRequired",
      baseName: "shapeBorderColorFieldRequired",
      type: "boolean",
    },
    {
      name: "shapeBorderWidth",
      baseName: "shapeBorderWidth",
      type: "number",
    },
    {
      name: "shapeFillColor",
      baseName: "shapeFillColor",
      type: "string",
    },
    {
      name: "shapeFillColorFieldName",
      baseName: "shapeFillColorFieldName",
      type: "string",
    },
    {
      name: "shapeFillColorFieldRequired",
      baseName: "shapeFillColorFieldRequired",
      type: "boolean",
    },
    {
      name: "shapeType",
      baseName: "shapeType",
      type: "AddFieldsDataFieldsInner.ShapeTypeEnum",
    },
    {
      name: "signatureAllowDraw",
      baseName: "signatureAllowDraw",
      type: "boolean",
    },
    {
      name: "signatureAllowType",
      baseName: "signatureAllowType",
      type: "boolean",
    },
    {
      name: "_static",
      baseName: "static",
      type: "boolean",
    },
    {
      name: "strikethrough",
      baseName: "strikethrough",
      type: "boolean",
    },
    {
      name: "stringConditionType",
      baseName: "stringConditionType",
      type: "AddFieldsDataFieldsInner.StringConditionTypeEnum",
    },
    {
      name: "title",
      baseName: "title",
      type: "string",
    },
    {
      name: "trueText",
      baseName: "trueText",
      type: "string",
    },
    {
      name: "type",
      baseName: "type",
      type: "AddFieldsDataFieldsInner.TypeEnum",
    },
    {
      name: "typeface",
      baseName: "typeface",
      type: "string",
    },
    {
      name: "uppercase",
      baseName: "uppercase",
      type: "boolean",
    },
    {
      name: "vAlignment",
      baseName: "vAlignment",
      type: "AddFieldsDataFieldsInner.VAlignmentEnum",
    },
    {
      name: "width",
      baseName: "width",
      type: "number",
    },
    {
      name: "x",
      baseName: "x",
      type: "number",
    },
    {
      name: "y",
      baseName: "y",
      type: "number",
    },
  ];

  static getAttributeTypeMap() {
    return AddFieldsDataFieldsInner.attributeTypeMap;
  }
}

export namespace AddFieldsDataFieldsInner {
  export enum AlignmentEnum {
    Left = "left",
    Center = "center",
    Right = "right",
  }
  export enum CheckCharacterEnum {
    _10003 = "&#10003;",
    _10004 = "&#10004;",
    _10006 = "&#10006;",
    _10007 = "&#10007;",
    _10008 = "&#10008;",
  }
  export enum DisplayTypeEnum {
    Text = "text",
    Check = "check",
    Qrcode = "qrcode",
    Barcode = "barcode",
    Image = "image",
    Shape = "shape",
  }
  export enum ImageGravityEnum {
    NorthWest = "NorthWest",
    North = "North",
    NorthEast = "NorthEast",
    West = "West",
    Center = "Center",
    East = "East",
    SouthWest = "SouthWest",
    South = "South",
    SouthEast = "SouthEast",
  }
  export enum ImageScaleTypeEnum {
    Fit = "fit",
    Fill = "fill",
    Stretch = "stretch",
  }
  export enum NumberConditionTypeEnum {
    Equals = "equals",
    Range = "range",
    Gte = "gte",
    Gt = "gt",
    Lte = "lte",
    Lt = "lt",
  }
  export enum OverflowEnum {
    ShrinkToFit = "shrink_to_fit",
    Truncate = "truncate",
  }
  export enum ShapeTypeEnum {
    Square = "square",
    Rectangle = "rectangle",
    Circle = "circle",
    Ellipse = "ellipse",
  }
  export enum StringConditionTypeEnum {
    Equals = "equals",
    Contains = "contains",
    StartsWith = "starts_with",
    EndsWith = "ends_with",
    Regex = "regex",
  }
  export enum TypeEnum {
    String = "string",
    Number = "number",
    Boolean = "boolean",
    Date = "date",
    Address = "address",
    Country = "country",
    Email = "email",
    Url = "url",
    Image = "image",
    Signature = "signature",
    Barcode = "barcode",
    Combined = "combined",
  }
  export enum VAlignmentEnum {
    Bottom = "bottom",
    Center = "center",
    Top = "top",
  }
}
